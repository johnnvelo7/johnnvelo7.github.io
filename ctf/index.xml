<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctfs on John Velo Site</title>
    <link>https://velosecurity.com/ctf/</link>
    <description>Recent content in Ctfs on John Velo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 06 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://velosecurity.com/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bad Memory - Forensics (MEDIUM) Huntress CTF Writeup</title>
      <link>https://velosecurity.com/ctf/bad_memory/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://velosecurity.com/ctf/bad_memory/</guid>
      
      <description>Bad Memory - Writeup The task wants us to recover the password that the user has forgotten. I immediately thought of using Volatility 3 since we are working with an image or memory dump.
file image.bin
So straight to action, I decided to get the NTLM hashes from this image.
vol -f image.bin windows.hashdump
I saveed these hashes into a text file and fire up my favourite password cracker, John The Ripper to crack these hashes.</description>
      
    </item>
    
    <item>
      <title>BlackCat - Malware (EASY - not really) Huntress CTF Writeup</title>
      <link>https://velosecurity.com/ctf/blackcat/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://velosecurity.com/ctf/blackcat/</guid>
      
      <description>Black Cat - Writeup In this challenge, I was given a zip file containing the malware.
I could already see that the challenge was about decrypting the encrypted files inside the victim-files along with the NOTE.png that tells me what to do in order to get the files back.
I also saw the encrypted flag.txt along with some random files inside the “victim-files” folder.
Since this is a CTF challenge, I thought about investing this pictures as well using Aperi&amp;rsquo;Solve, a really good website to automate stenography.</description>
      
    </item>
    
    <item>
      <title>Snake Eater - Malware (EASY) Huntress CTF Writeup</title>
      <link>https://velosecurity.com/ctf/snake_eateri/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://velosecurity.com/ctf/snake_eateri/</guid>
      
      <description>Snake Eater - Writeup First things first, to analyze this malware, I had to examine what kind of file it was. Using file and strings command in Kali, gave me a view of what this file was doing.
file snake_eater.exe
After analyzing the malware structure and description, I realied that the file was encrypted in some ways so I stopped and had to brainstorm a bit.
strings snake_eater.exe
In order to get more information, I used the binwalk command in Kali to see more what it was doing.</description>
      
    </item>
    
    <item>
      <title>Snake Eater II - Malware (MEDIUM) Huntress CTF Writeup</title>
      <link>https://velosecurity.com/ctf/snake_eaterii/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://velosecurity.com/ctf/snake_eaterii/</guid>
      
      <description>Snake Eater II - Writeup After unzipping this file, I checked first what kind of file this malware is.
file snake_eaterII.exe
Seems familiar to the previous challenge so I decided to check it in windows too. I saw that it had the same icon as the previous challenge.
I figured that this challenge might have the same solution as the previous one so I ran procmon to see what it was doing, perhaps on the same path directory as Snake Eater.</description>
      
    </item>
    
    <item>
      <title>Indirect Payload - Miscellaneous (MEDIUM) Huntress CTF Writeup</title>
      <link>https://velosecurity.com/ctf/indirect_payload/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://velosecurity.com/ctf/indirect_payload/</guid>
      
      <description>Indirect Payload - Writeup Visiting the website we get this page:
When I clickked on the button, it redirected me to another url, and got error message. Hmmm&amp;hellip; It seems as clicking the button results in an endless loop of redirection.
I then decided to see what is happening using burpsuite.
Everytime I sent a GET request to /flag.php site, I got new URLs instead. This was when I decided to follow it manually, and after 2 more redirections I could finally see the first character of the flag.</description>
      
    </item>
    
  </channel>
</rss>
